//MODULES
const express = require('express')
const {Botact} = require('botact')
const bodyParser = require('body-parser')
const mysql = require('mysql')
const server = express()
const PORT = process.env.PORT || 80


//BOT SETUP
const bot = new Botact({
    token: '91c66aec637d3f1ea0615132ea568793ffc55b18c0dd878c386584ee226bf7264f669f30cc61986c8e3e2',
    confirmation: 'f5f07863'
})


//SERVER SETUP
server.use(bodyParser.json())
server.post('/', bot.listen)
server.get('/', (request, response) => {
    request.header('Content-Type', 'application/json')
    response.send('f5f07863')
})
server.listen(PORT)


//MYSQL SETUP
let pool  = mysql.createPool({
host: "us-cdbr-iron-east-01.cleardb.net",
user: "b09805f711cdac",
password: "c362ba82",
database: "heroku_2cf38b0299dd81c"
});


//API
let msg; //–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
let connected = false; //–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ
let partner_id = 0; //Id —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
let pair; //Id —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã

//GLOBAL VARS
let user_id = 0;
let current_pair_id = 0;
let chatting = false;
let jointed = false;
let leaved = false;

//BOT BASIC EVENTS

console.log('running')

//–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
let group_join_msg = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é!–¢—ã —Å–¥–µ–ª–∞–ª –º–∞–ª–µ–Ω—å–∫–∏–π, –Ω–æ –≤–µ—Å–æ–º—ã–π —à–∞–≥ –∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏‚ô•–≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Å –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–º–∏ –ª—é–¥—å–º–∏‚ú® –ê —Ç—ã —É–∂–µ - –Ω–∞—à–∞ —á–∞—Å—Ç—å üòå–ú—ã –æ–±–µ—â–∞–µ–º, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòè. \n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –±–µ—Å–µ–¥–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –ö–æ–º–∞–Ω–¥–∞ exit - –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç.';
let group_leave_msg = '–ñ–∞–ª—å, —á—Ç–æ –ø–æ–∫–∏–¥–∞–µ—Ç–µ –ù–∞—Å((';

//–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
bot.event('group_join', ({ reply }) => {
    if(!jointed){
        reply(group_join_msg)
        jointed = true
    }
  
    //saveNewMember(saveMember, reply.vk_id);
})
//–í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã
bot.event('group_leave', ({ reply }) => {
    if(!leaved){
        reply(group_leave_msg)
        leaved = true
    }
  
})



//–ù–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É + –Ω–∞–π—Ç–∏ –ø–∞—Ä—É
bot.command('start', (ctx) => {
    user_id = ctx.user_id;
    if(!chatting){
        ctx.reply('–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É start");
        setTimeout(loginTimer, 3000);
    //loginUser(UpdateLoginStatus);
    }else{
        ctx.reply('–ë–æ—Ç: –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –±–µ—Å–µ–¥—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É exit');
    }
    
})
bot.command('Start', (ctx) => {
    user_id = ctx.user_id;
    if(!chatting){
        ctx.reply('–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É start");
        setTimeout(loginTimer, 3000);
    //loginUser(UpdateLoginStatus);
    }else{
        ctx.reply('–ë–æ—Ç: –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –±–µ—Å–µ–¥—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É exit');
    }
    
})
function loginTimer(){
    loginUser(UpdateLoginStatus)
}
//–Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É
bot.command('go', (ctx) => {
    user_id = ctx.user_id;
    ctx.reply('–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É');
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #000000");
})
//–≤—ã–π—Ç–∏ –∏–∑ –±–µ—Å–µ–¥—ã
bot.command('exit', (ctx) => {
    user_id = ctx.user_id;
    ctx.reply('–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ–∞–Ω—Å...', null, {
    one_time: false,
    buttons: [
      [
        {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"\"}",
                    "label": "–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ–∞–Ω—Å"
                },
                "color": "negative"
            }
      ]
    ]
  }));
     
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ–∞–Ω—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #000000");
    //user_id = 0;
    chatting = false;
    setTimeout(exitTimer, 1000);
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.');
})
bot.command('Exit', (ctx) => {
    user_id = ctx.user_id;
    ctx.reply('–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ–∞–Ω—Å...', null, {
    one_time: false,
    buttons: [
      [
        {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"\"}",
                    "label": "–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ–∞–Ω—Å"
                },
                "color": "negative"
            }
      ]
    ]
  }));
     
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ–∞–Ω—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #000000");
    //user_id = 0;
    chatting = false;
    //closeChat()
    setTimeout(exitTimer, 1000);
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.');
})
function exitTimer(){
    closeChat()
}
bot.command('info', (ctx) => {
    user_id = ctx.user_id;
    ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:');
    info()
})

//–õ–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤—Å—è–∫–æ–π —Ü–µ–ª–∏
bot.on(function(res){
    
    if(user_id!==215059409){
        res.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. ', null, {
    one_time: false,
    buttons: [
      [
        {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"start\"}",
                    "label": "start"
                },
                "color": "positive"
            },
            {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"exit\"}",
                    "label": "exit"
                },
                "color": "negative"
            }
      ]
    ]
  })
    }
    if(res.user_id===2150594090){
        res.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω. ', null, {
    one_time: false,
    buttons: [
      [
        {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"start\"}",
                    "label": "start"
                },
                "color": "positive"
            },
            {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"exit\"}",
                    "label": "exit"
                },
                "color": "negative"
            },
          {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"info\"}",
                    "label": "info"
                },
                "color": "primary"
            }
      ]
    ]
  })
    }
});

//loginUser

//START
function UpdateLoginStatus(status, id){
    if(Object.keys(id).length!==0){
        bot.reply(user_id, '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ —á–∞—Ç')
        startChat()
    }else{
        bot.reply(user_id, '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        regUser()
    }
}
//–ù–∞—á–∞—Ç—å —á–∞—Ç
function startChat(){
    getPairbyId(UpdateCurrentPair, user_id);
}

//–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç
function closeChat(){
    noticeCloseSession()
    closeSession()
}
//–ó–∞—Ä–µ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function regUser(){
    createNewUser(InsertUser, user_id);
}

//–ù–∞–π—Ç–∏ –ø–∞—Ä—É
function findPair(){
    getFreePairbyId(CreateChat, user_id);
}
function info(){
    getAllStats();
}

//–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
getAllStats = function() {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        return; 
      }
        
        for(let i = 0; i < Object.keys(results).length; i++){
            bot.reply(parseInt(user_id), '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '+'https://vk.com/id'+results[i].vk_id);
        }
        
    });
  });
pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE pair_id ='' ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        return; 
      }
        
        if(Object.keys(results).length > 0){
            for(let i = 0; i < Object.keys(results).length; i++){
            bot.reply(parseInt(user_id), '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–∞—Ä—ã: '+'https://vk.com/id'+results[i].vk_id);
        }
        }
        
        
    });
  });
    pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      return; 
    }
    let sql = "SELECT vk_id, pair_id FROM chatbot_data WHERE pair_id != '' ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        return; 
      }
        
        if(Object.keys(results).length > 0){
            for(let i = 0; i < Object.keys(results).length; i++){
            bot.reply(parseInt(user_id), "–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç:\n" + "https://vk.com/id"+results[i].vk_id + "/ "  + "–û–±—â–∞–µ—Ç—Å—è —Å https://vk.com/id"+results[i].pair_id);
        }
        }
        
        
    });
  });
};

//SQL API
//–õ–æ–≥–∏–Ω
loginUser = function(callback) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE vk_id = "+user_id+" ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      callback(false, results);
    });
  });
};

//–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é
closeSession = function() {
    console.log(2)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      return; 
    }
    let sql = "UPDATE chatbot_data SET pair_id = '' WHERE pair_id = "+user_id+" ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        return; 
      }
        console.log(results)
    });
  });
    pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      return; 
    }
    let sql = "DELETE FROM chatbot_data WHERE vk_id = "+user_id+"";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        return; 
      }
        console.log(results)
    });
  });
};
//–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞
noticeCloseSession = function() {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE pair_id = "+user_id+"";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        return; 
      }
        if(Object.keys(results).length>0 && (parseInt(results[0].vk_id) !== user_id)){
            bot.reply(parseInt(results[0].vk_id), '–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É')
        
        }if(current_pair_id !== 0 && current_pair_id !== user_id ){
           bot.reply(current_pair_id, '–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É')
       }
         current_pair_id = 0;
        
    });
  });
};
//–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
getPairbyId = function(callback, id) {
    console.log('–ò—â–µ–º –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è#' + id)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT pair_id FROM chatbot_data WHERE vk_id = "+id+"";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      callback(false, results);
    });
  });
};

getPairbyIdFix = function(callback, id, msg) {
    console.log('–ò—â–µ–º –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è#' + id)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT pair_id FROM chatbot_data WHERE vk_id = "+id+"";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        connection_problems = false;
        if(Object.keys(results).length > 0 && parseInt(results[0].pair_id) == 0){
            bot.reply(user_id, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. ');
        }else if(Object.keys(results).length > 0){
           bot.reply(parseInt(results[0].pair_id), "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: "+msg);
      callback(false, results);
           }else{
               bot.reply(user_id, '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –í—ã—Ö–æ–∂—É –∏–∑ —á–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.');
               closeChat();
           }
        
    });
  });
};
//–í–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
createNewUser = function(callback, id) {
    console.log('–†–µ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è#' + id)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "INSERT INTO chatbot_data (vk_id) VALUES("+id+")";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      callback(results);
    });
  });
};

//–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—É
SetPair = function(callback, id, pair_id) {
    console.log('SetPair');
    console.log(pair_id);
    console.log(id);
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
      let sql = "UPDATE chatbot_data SET pair_id = "+pair_id+" WHERE vk_id = "+user_id+" ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
    });
  });
    pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
     let sql = "UPDATE chatbot_data SET pair_id = "+user_id+" WHERE vk_id = "+pair_id+" ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      callback(results);
    });
  });
};

//–ù–∞–π—Ç–∏ –ø–∞—Ä—É
getFreePairbyId = function(callback) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE pair_id = '' AND vk_id != "+user_id+"  AND vk_id != '' ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        if(Object.keys(results).length > 0){
            current_pair_id = parseInt(results[0].vk_id);
            console.log('id'+current_pair_id)
        }
    
      callback(results);
    });
  });
};

//–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—É


//Update Pairs

//–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É
function UpdateCurrentPair(status, data){
    if(!status && data[0].pair_id !== ''){
        current_pair_id = parseInt(data[0].pair_id);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å#'+user_id + ' –Ω–∞—à—ë–ª –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #'+current_pair_id);
        SendMessage();
    }else{
        bot.reply(user_id,'–£ –≤–∞—Å –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤');
        findPair()
    }
}

//–°–æ–∑–¥–∞—Ç—å —á–∞—Ç
function CreateChat(data){
    if(Object.keys(data).length !== 0){
        bot.reply(user_id, '–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        bot.reply(current_pair_id, '–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!');
        SetPair(SendMessage, user_id, current_pair_id);
        //SendMessage();
    }else{
        bot.reply(user_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç.');
    }
}

//–í–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function InsertUser(data){
    bot.reply(user_id, '–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç-–±–æ—Ç–µ. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
    findPair()
}

//–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø
function checkAccess(){
    getPairbyId(UpdateCurrentPair, user_id);
}

let connection_problems = false;
//–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function SendMessage(){
    chatting = true;
        console.log('–û—Ç –∫–æ–≥–æ: ' + user_id);
    console.log('–ö–æ–º—É: ' + current_pair_id);
        bot.on(function (res){
        user_id = parseInt(res.user_id);
            //if(user_id === current_pair_id){
            if(res.body!==''){
                getPairbyIdFix(UpdateCurrentPair, user_id, res.body);
                connection_problems = true; 
            }else{
                res.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∏–∫–µ—Ä—ã, –∏–ª–∏ —á—Ç–æ –≤—ã —Ç–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.');
            }
                
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #'+user_id + ' –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ('+res.body+') –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #'+current_pair_id); 
                
            
}) 
}

//mysql://b09805f711cdac:c362ba82@us-cdbr-iron-east-01.cleardb.net/heroku_2cf38b0299dd81c?reconnect=true