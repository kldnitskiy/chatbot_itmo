//MODULES
const express = require('express')
const {Botact} = require('botact')
const bodyParser = require('body-parser')
const mysql = require('mysql')
const server = express()
const PORT = process.env.PORT || 80


//BOT SETUP
const bot = new Botact({
    token: '91c66aec637d3f1ea0615132ea568793ffc55b18c0dd878c386584ee226bf7264f669f30cc61986c8e3e2',
    confirmation: 'f5f07863'
})


//SERVER SETUP
server.use(bodyParser.json())
server.post('/', bot.listen)
server.get('/', (request, response) => {
    request.header('Content-Type', 'application/json')
    response.send('f5f07863')
})
server.listen(PORT)


//MYSQL SETUP
let pool  = mysql.createPool({
host: "us-cdbr-iron-east-01.cleardb.net",
user: "b09805f711cdac",
password: "c362ba82",
database: "heroku_2cf38b0299dd81c"
});


//API
let msg; //–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
let connected = false; //–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ
let partner_id = 0; //Id —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
let pair; //Id —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã

//GLOBAL VARS
let user_id = 0;
let current_pair_id = 0;

//getUsers
getUsers = function(callback) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        //return results;
      callback(false, results);
    });
  });
};


//getPair
getPair = function(callback, id, msg) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE pair_id = "+id+"";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      pair = results[0].vk_id;  
        partner_id = pair;
      callback(false, results, pair, msg);
        
    });
  });
};


//getUnpaired
getUnPaired = function(callback) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE pair_id = ''";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        //return results;
      callback(false, results);
    });
  });
};


//CheckPair
CheckPair = function(callback, id, user_message) {
    console.log('–ó–∞–ø—Ä–æ—Å –æ—Ç ' + id)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT pair_id FROM chatbot_data WHERE vk_id = "+id+" AND pair_id !=''";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        //return results;
      callback(false, results, user_message);
    });
  });
};


//SetPair



//CALLBACKS
//let users = getUsers(saveUsers);
function saveUsers(status, result){
    users = result;
    console.log('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log(users);
}

function savePair(status, result, pair){
}
//let unpaired = getUnPaired(saveUnpaired);
function saveUnpaired(status, result){
    unpaired = result;
    console.log('–í—Å–µ–≥–æ –±–µ–∑ –ø–∞—Ä—ã');
    console.log(unpaired);
}
function savePaired(status, result, id, pair_id){
   bot.reply(id, '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');  
    bot.reply(pair_id, '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');  
    bot.reply(id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /go, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É, –∞ –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É'); 
    bot.reply(pair_id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /go, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É, –∞ –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É');  
    if(connected === false){
        connected = true;
    }
    //bot.reply(pair_id, '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...'); 
    let pair = getPair(savePair, id);
}
function checkifUnpaired(status, result, user_message){
    //DETECT PAIR
    //console.log(result);
    if(Object.keys(result).length === 0){
        if(connected !== true){
            connected = false;
        }
        
        //Bot action
        user_message.reply('–í–∏–∂—É, –≤–∞–º –ø–æ–∫–∞ –Ω–µ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–∞—Ä—ã...');
        
        for(let i = 0; i < unpaired.length; i++){
            if(parseInt(unpaired[i].vk_id) !== parseInt(user_message.user_id)){
                pair_id = unpaired[i].vk_id;
                delete unpaired[i];
                console.log(pair_id);
                break;
            }
        }
        SetPair(savePaired, user_message.user_id, pair_id);
    }else{
        
        connected = true;
        //Bot action
        partner_id = pair;
        bot.reply(parseInt(partner_id),user_message.body);
        pair = getPair(savePair, user_message.user_id);
        
    }
}

let current_message;


function bot_respond(status, result, id, msg){
    bot.reply(parseInt(id), '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: ' + msg);
}

function botSay(id,msg){
    bot.reply(id,msg);
}
//SAVENEWMEMBER
saveNewMember = function(callback, id) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "INSERT INTO chatbot_data (vk_id) VALUES("+id+")";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        console.log(results);
      callback(false, results, parseInt(id));
        
    });
  });
};
//CLOSE SESSION
closeSession = function(callback, id) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "UPDATE chatbot_data SET pair_id = (case when vk_id = "+id+" then '' when pair_id =  "+id+" then  '' end)";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        bot.reply(parseInt(pair), '–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É.')
        connected = false;
        partner_id = 0;
      callback(false, results);
        
    });
  });
};
function Session(status, results){
    
}

function saveMember(status, results, id){
    console.log(id);
    bot.reply(parseInt(id), '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç-–±–æ—Ç–µ!\n –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.')
    
}
//saveNewMember(saveMember, reply.vk_id);


//BOT BASIC EVENTS

//–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
let group_join_msg = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é!–¢—ã —Å–¥–µ–ª–∞–ª –º–∞–ª–µ–Ω—å–∫–∏–π, –Ω–æ –≤–µ—Å–æ–º—ã–π —à–∞–≥ –∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏‚ô•–≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Å –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–º–∏ –ª—é–¥—å–º–∏‚ú® –ê —Ç—ã —É–∂–µ - –Ω–∞—à–∞ —á–∞—Å—Ç—å üòå–ú—ã –æ–±–µ—â–∞–µ–º, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòè. \n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –±–µ—Å–µ–¥–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.';
let group_leave_msg = '–ñ–∞–ª—å, —á—Ç–æ –ø–æ–∫–∏–¥–∞–µ—Ç–µ –ù–∞—Å((';

//–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
bot.event('group_join', ({ reply }) => {
  reply(group_join_msg)
    //saveNewMember(saveMember, reply.vk_id);
})
//–í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã
bot.event('group_leave', ({ reply }) => {
  reply(group_leave_msg)
})



//–ù–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É + –Ω–∞–π—Ç–∏ –ø–∞—Ä—É
bot.command('start', (ctx) => {
    user_id = ctx.user_id;
    ctx.reply('–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É start");
    loginUser(UpdateLoginStatus);
})
//–Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É
bot.command('go', (ctx) => {
    ctx.reply('–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É');
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #000000");
})
//–≤—ã–π—Ç–∏ –∏–∑ –±–µ—Å–µ–¥—ã
bot.command('exit', (ctx) => {
    ctx.reply('–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ–∞–Ω—Å. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.');
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #"+ctx.user_id+" –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ–∞–Ω—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #000000");
    //closeSession(Session, parseInt(ctx.user_id));
})

//loginUser

//START
function UpdateLoginStatus(status, id){
    if(Object.keys(id).length!==0){
        bot.reply(user_id, '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ —á–∞—Ç')
        startChat()
    }else{
        bot.reply(user_id, '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        regUser()
    }
}
//–ù–∞—á–∞—Ç—å —á–∞—Ç
function startChat(){
    getPairbyId(UpdateCurrentPair, user_id);
}

//–ó–∞—Ä–µ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function regUser(){
    createNewUser(InsertUser, user_id);
}

//–ù–∞–π—Ç–∏ –ø–∞—Ä—É
function findPair(){
    getFreePairbyId(CreateChat, user_id);
}


//SQL API
//–õ–æ–≥–∏–Ω
loginUser = function(callback) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE vk_id = "+user_id+" ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      callback(false, results);
    });
  });
};

//–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
getPairbyId = function(callback, id) {
    console.log('–ò—â–µ–º –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è#' + id)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT pair_id FROM chatbot_data WHERE vk_id = "+id+"";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      callback(false, results);
    });
  });
};

getPairbyIdFix = function(callback, id, msg) {
    console.log('–ò—â–µ–º –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è#' + id)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT pair_id FROM chatbot_data WHERE vk_id = "+id+"";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        connection_problems = false;
        bot.reply(parseInt(results[0].pair_id), "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: "+msg);
      callback(false, results);
    });
  });
};
//–í–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
createNewUser = function(callback, id) {
    console.log('–†–µ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è#' + id)
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "INSERT INTO chatbot_data (vk_id) VALUES("+id+")";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
      callback(results);
    });
  });
};

//–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—É
SetPair = function(callback, id, pair_id) {
    console.log('SetPair');
    console.log(pair_id);
    console.log(id);
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
      let sql = "UPDATE chatbot_data SET pair_id = (case when vk_id = "+pair_id+" then  "+id+" when vk_id =  "+id+" then  "+par_id+" end)";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        //return results;
      callback(results);
    });
  });
};

//–ù–∞–π—Ç–∏ –ø–∞—Ä—É
getFreePairbyId = function(callback) {
  pool.getConnection(function(err, connection) {
    if(err) { 
      console.log(err); 
      callback(true); 
      return; 
    }
    let sql = "SELECT vk_id FROM chatbot_data WHERE pair_id = '' AND vk_id != "+user_id+"  AND vk_id != '' ";
    connection.query(sql, [], function(err, results) {
      connection.release(); // always put connection back in pool after last query
      if(err) { 
        console.log(err); 
        callback(true); 
        return; 
      }
        if(Object.keys(results).length > 0){
            current_pair_id = parseInt(results[0].vk_id);
            console.log('id'+current_pair_id)
        }
    
      callback(results);
    });
  });
};

//–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—É


//Update Pairs

//–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É
function UpdateCurrentPair(status, data){
    if(!status && data[0].pair_id !== ''){
        current_pair_id = parseInt(data[0].pair_id);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å#'+user_id + ' –Ω–∞—à—ë–ª –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #'+current_pair_id);
        SendMessage();
    }else{
        bot.reply(user_id,'–£ –≤–∞—Å –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤');
        findPair()
    }
}

//–°–æ–∑–¥–∞—Ç—å —á–∞—Ç
function CreateChat(data){
    if(Object.keys(data).length !== 0){
        bot.reply(user_id, '–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        bot.reply(current_pair_id, '–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!');
        SetPair(SendMessage, user_id, current_pair_id);
        //SendMessage();
    }else{
        bot.reply(user_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç.');
    }
}

//–í–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function InsertUser(data){
    bot.reply(user_id, '–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç-–±–æ—Ç–µ. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
    findPair()
}


//–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø
function checkAccess(){
    getPairbyId(UpdateCurrentPair, user_id);
}




let connection_problems = false;
//–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function SendMessage(){
        console.log('–û—Ç –∫–æ–≥–æ: ' + user_id);
    console.log('–ö–æ–º—É: ' + current_pair_id);
        bot.on(function (res){
        user_id = parseInt(res.user_id);
            if(user_id === current_pair_id){
                getPairbyIdFix(UpdateCurrentPair, user_id, res.body);
                connection_problems = true;
            }
        if(!connection_problems){
            bot.reply(current_pair_id, '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: '+res.body);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #'+user_id + ' –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ('+res.body+') –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #'+current_pair_id); 
        }
       
        
})
    
}
    

//BOT REPLIES
/*
    bot.on(function (user_message){
    msg = user_message.body;
    console.log(user_message.user_id + '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫: ' +partner_id);
    console.log(user_message.user_id + ':'+msg);
        //NO commands
        if(msg!=='start' && msg!=='/start'){
            if(partner_id===0){
                isUnpaired = CheckPair(checkifUnpaired, user_message.user_id,user_message); 
}     
        if(connected && parseInt(partner_id)!==0){
            if(parseInt(partner_id) !== user_message.user_id){
                bot.reply(parseInt(partner_id), '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: ' +msg);
            }else{
                getPair(bot_respond, user_message.user_id, user_message.body);
            }
            
        }
        }
        let isUnpaired;
})

*/


//mysql://b09805f711cdac:c362ba82@us-cdbr-iron-east-01.cleardb.net/heroku_2cf38b0299dd81c?reconnect=true